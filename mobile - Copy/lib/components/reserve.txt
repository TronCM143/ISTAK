import 'dart:convert';
import 'package:flutter/material.dart';
import 'package:mobile/apiURl.dart';
import 'package:mobile/components/returning.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:http/http.dart' as http;
import 'package:mobile/components/qr_scanner.dart';

class Home extends StatefulWidget {
  const Home({super.key});

  @override
  State<Home> createState() => _HomeState();
}

class _HomeState extends State<Home> {
  List items = [];
  bool loading = true;
  String? error;
  int _selectedIndex = 0;

  @override
  void initState() {
    super.initState();
    fetchItems();
  }

  Future<void> fetchItems() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final token = prefs.getString("access_token");

      debugPrint("Access token: $token");

      if (token == null) {
        setState(() {
          error = "User not authenticated";
          loading = false;
        });
        return;
      }

      final url = Uri.parse(API.getItems);
      debugPrint("Fetching from: $url");
      final response = await http.get(
        url,
        headers: {
          "Content-Type": "application/json",
          "Authorization": "Bearer $token",
        },
      );

      debugPrint("Response status: ${response.statusCode}");
      debugPrint("Response body: ${response.body}");

      if (response.statusCode == 200) {
        final decoded = jsonDecode(response.body);
        debugPrint("Decoded response: $decoded");
        setState(() {
          items = decoded;
          loading = false;
        });
        debugPrint("Items loaded: ${items.length}");
      } else {
        setState(() {
          error =
              "Failed to load items: ${response.statusCode} - ${response.body}";
          loading = false;
        });
      }
    } catch (e) {
      debugPrint("Exception: $e");
      setState(() {
        error = "Error: $e";
        loading = false;
      });
    }
  }

  void _onItemTapped(int index) {
    setState(() {
      _selectedIndex = index;
    });
    if (index == 0) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const QRScanner()),
      );
    } else if (index == 1) {
      Navigator.push(
        context,
        MaterialPageRoute(builder: (_) => const ReturnItem()),
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return SafeArea(
      child: Scaffold(
        body: Stack(
          children: [
            Container(
              width: double.infinity,
              height: double.infinity,
              decoration: const BoxDecoration(
                gradient: LinearGradient(
                  colors: [
                    Color.fromARGB(255, 13, 20, 11),
                    Color.fromARGB(255, 40, 38, 38),
                  ],
                  begin: Alignment.topCenter,
                  end: Alignment.bottomCenter,
                ),
              ),
            ),
            Column(
              children: [
                Padding(
                  padding: const EdgeInsets.only(top: 16.0, bottom: 8.0),
                  child: Hero(
                    tag: "istakLogo",
                    child: Image.asset(
                      "assets/fullLogo.png",
                      width: 150,
                      height: 120,
                      fit: BoxFit.contain,
                    ),
                  ),
                ),
                Expanded(
                  child: loading
                      ? const Center(child: CircularProgressIndicator())
                      : error != null
                      ? Center(child: Text(error!))
                      : items.isEmpty
                      ? const Center(child: Text("No items found"))
                      : SingleChildScrollView(
                          scrollDirection: Axis.horizontal,
                          child: DataTable(
                            dataTextStyle: TextStyle(
                              color: const Color.fromARGB(255, 255, 255, 255),
                            ),
                            columns: const [
                              DataColumn(
                                label: Text(
                                  "Name",
                                  style: TextStyle(
                                    color: Color.fromARGB(255, 255, 255, 255),
                                  ),
                                ),
                              ),
                              DataColumn(
                                label: Text(
                                  "Status",
                                  style: TextStyle(
                                    color: Color.fromARGB(255, 255, 255, 255),
                                  ),
                                ),
                              ),
                              DataColumn(
                                label: Text(
                                  "Condition",
                                  style: TextStyle(
                                    color: Color.fromARGB(255, 255, 255, 255),
                                  ),
                                ),
                              ),
                              DataColumn(
                                label: Text(
                                  "Last Borrowed",
                                  style: TextStyle(
                                    color: Color.fromARGB(255, 255, 255, 255),
                                  ),
                                ),
                              ),
                              DataColumn(
                                label: Text(
                                  "QR Code",
                                  style: TextStyle(
                                    color: Color.fromARGB(255, 255, 255, 255),
                                  ),
                                ),
                              ),
                            ],
                            rows: items.map((item) {
                              return DataRow(
                                cells: [
                                  DataCell(Text(item["item_name"] ?? "N/A")),
                                  DataCell(Text(item["status"] ?? "N/A")),
                                  DataCell(Text(item["condition"] ?? "N/A")),
                                  DataCell(
                                    Text(item["last_borrowed_date"] ?? "N/A"),
                                  ),
                                  DataCell(Text(item["qrCode"] ?? "N/A")),
                                ],
                              );
                            }).toList(),
                          ),
                        ),
                ),
              ],
            ),
          ],
        ),
        bottomNavigationBar: BottomNavigationBar(
          items: const [
            BottomNavigationBarItem(
              icon: Icon(Icons.qr_code_scanner),
              label: 'Scan QR',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.assignment_return),
              label: 'Return Item',
            ),
          ],
          currentIndex: _selectedIndex,
          selectedItemColor: Colors.blue[800],
          onTap: _onItemTapped,
        ),
      ),
    );
  }
}
